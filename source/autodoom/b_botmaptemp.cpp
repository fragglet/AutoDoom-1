// Emacs style mode select   -*- C++ -*-
//-----------------------------------------------------------------------------
//
// Copyright(C) 2015 Ioan Chera
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/
//
// Additional terms and conditions compatible with the GPLv3 apply. See the
// file COPYING-EE for details.
//
//-----------------------------------------------------------------------------
//
// DESCRIPTION:
//      Temporary bot map, processed to result into the final bot map
//
//-----------------------------------------------------------------------------

#include "../z_zone.h"
#include "b_analysis.h"
#include "b_botmap.h"
#include "b_botmaptemp.h"
#include "b_util.h"
#include "../a_doom.h"
#include "../ev_specials.h"
#include "../m_buffer.h"
#include "../p_info.h"
#include "../p_maputl.h"
#include "../p_setup.h"
#include "../p_spec.h"
#include "../r_main.h"
#include "../r_state.h"

TempBotMap *tempBotMap;

////////////////////////////////////////////////////////////////////////////////
//
// TempBotMap builder intermediary classes
//
////////////////////////////////////////////////////////////////////////////////

//
// TempBotMapPImpl
//
// Private implementation
//
class TempBotMapPImpl : public ZoneObject
{
   TempBotMap *o;
public:
   //
   // LinePtrFlip
   //
   // Helper structure with Line pointer and flip flag
   //
   struct LinePtrFlip
   {
      TempBotMap::Line *lineref;  // line reference
      bool flipped;                 // was this line flipped?
      bool operator == (const LinePtrFlip &other) const
      {
         // needed for std::set
         return lineref == other.lineref;
         // 'flipped' not considered
      }
      struct Hash
      {
         size_t operator()(const LinePtrFlip &other) const
         {
            return std::hash<void *>()(other.lineref);
         }
      };
   };
   static LinePtrFlip makeLinePtrFlip (TempBotMap::Line *ptr)
   {
      LinePtrFlip ret;
      ret.lineref = ptr;
      // 'flipped' undefined!
      return ret;
   }
   static LinePtrFlip makeLinePtrFlip ( TempBotMap::Line *ptr, bool flip)
   {
      LinePtrFlip ret;
      ret.lineref = ptr;
      ret.flipped = flip;
      return ret;
   }
   typedef std::unordered_set<LinePtrFlip, LinePtrFlip::Hash> LinePtrFlipSet;

   //
   // RawLine
   //
   // Pre-line generated from BSP scanning, to be used to generate a final line.
   // Only connects simple sectors, and should only appear on non-standard
   // setups (vanilla doom deep water etc.)
   //
   struct RawLine
   {
      //const sector_t *sector[2];    // sector references
      v2fixed_t v[2];               // end point coordinates
      const line_t*     line;
   };
   
   //
   // RawMSector
   //
   // Pre-metasector generated by linedef
   //
   class RawMSector : public ZoneObject
   {
   public:
      v2fixed_t v[6];            // vertices, clockwise
      union
      {
         const line_t *lineGen;   // line which generated this
         const Mobj *mobjGen;     // thing which generated this
      };
      LinePtrFlipSet linerefs;
      int nvertices;             // commonly 4 or 6
      bool isFromMobj;
   };
private:
   //
   // BSPLineGen
   //
   // Helper class to generate the rawBSPLines collection. Contains the stack
   //
   class BSPLineGen : public ZoneObject
   {
      struct IndexedLineEq
      {
         LineEq le;
         int ind;
      };
      static IndexedLineEq MakeIndLineEq(int ind, double a, double b, double c)
      {
         IndexedLineEq ret;
         ret.ind = ind;
         ret.le.a = a;
         ret.le.b = b;
         ret.le.c = c;
         return ret;
      }
      static IndexedLineEq MakeIndLineEq(int ind, const LineEq &le)
      {
         IndexedLineEq ret;
         ret.ind = ind;
         ret.le = le;
         return ret;
      }
      PODCollection<IndexedLineEq> linestack;    // stack of visited lines
      static PODCollection<v2fixed_t> proto;     // lists of colinear vertices
      Collection<PODCollection<v2fixed_t> > splitcoll;
      
      void recursiveGetLines(int nodenum);
   public:
      BSPLineGen()
      {
         splitcoll.setPrototype(&proto);
      }
      void startGetLines();
      void putLinesInColl(PODCollection<RawLine> &coll);
   };
   
public:
   PODCollection<RawLine> rawBSPLines;
   Collection<RawMSector> rawMSectors;
   
   TempBotMapPImpl(TempBotMap *owner) : o(owner)
   {
      static RawMSector rms;
      rawMSectors.setPrototype(&rms);
   }
   ~TempBotMapPImpl()
   {
   }
   
   void getBSPLines();
   void getLineMSectors();
   void getThingMSectors();
   
   void placeBSPLines();
   void placeMSecLines();
   
   void fillMSecRefs();
};
PODCollection<v2fixed_t> TempBotMapPImpl::BSPLineGen::proto;


//
// TempBotMapPImpl::BSPLineGen::recursiveGetLines
//
// Does a stack-wise obtaining of BSP lines
//
void TempBotMapPImpl::BSPLineGen::recursiveGetLines(int nodenum)
{
   if(nodenum & NF_SUBSECTOR)
      return;  // leaf, ignore
   const fnode_t &fnode = fnodes[nodenum];
   LineEq le = LineEq::MakeFloat(fnode);

   if(!le.a && !le.b)
      return;  // avoid degenerate nodes
   
   double ix, iy, dist1, dist2, dmin1, dmin2; // intersection point
   double x1, y1, x2, y2;
   int imin1, imin2;
   dmin1 = dmin2 = 1e100;
   
   for (IndexedLineEq *it = linestack.begin(); it != linestack.end(); ++it)
   {
      const LineEq &le2 = it->le;
      if (!B_IntersectionPoint(le, le2, ix, iy))
         continue;
      
      dist1 = fabs(ix - fnode.fx) + fabs(iy - fnode.fy);
      dist2 = fabs(ix - fnode.fx - fnode.fdx) + fabs(iy - fnode.fy - fnode.fdy);
      
      if (dist2 < dist1)
      {
         // closer to second vertex: forwards
         if (dist2 < dmin2)
         {
            dmin2 = dist2;
            x2 = ix;
            y2 = iy;
            imin2 = it->ind;
         }
      }
      else
      {
         // closer to first vertex: backwards
         if (dist1 < dmin1)
         {
            dmin1 = dist1;
            x1 = ix;
            y1 = iy;
            imin1 = it->ind;
         }
      }
   }
   
   fixed_t fx1, fy1, fx2, fy2;
   fx1 = M_DoubleToFixed(x1);
   fy1 = M_DoubleToFixed(y1);
   fx2 = M_DoubleToFixed(x2);
   fy2 = M_DoubleToFixed(y2);
   // got them
   if (imin1 >= 0)
   {
      splitcoll[imin1].add(B_MakeV2Fixed(fx1, fy1));
   }
   if (imin2 >= 0)
   {
      splitcoll[imin2].add(B_MakeV2Fixed(fx2, fy2));
   }
   
   PODCollection<v2fixed_t> &sle = splitcoll.addNew();
   sle.add(B_MakeV2Fixed(fx1, fy1));
   sle.add(B_MakeV2Fixed(fx2, fy2));
   
   linestack.add(MakeIndLineEq((int)splitcoll.getLength() - 1, le));
   recursiveGetLines(nodes[nodenum].children[0]);
   recursiveGetLines(nodes[nodenum].children[1]);
   linestack.pop();
}

//
// TempBotMapPImpl::BSPLineGen::recursiveGetLines
//
// Starts a stack-wise obtaining of BSP lines
//
void TempBotMapPImpl::BSPLineGen::startGetLines()
{
   // clear stack
   linestack.resize(0);
   
   // clear collection
   splitcoll.makeEmpty();
   
   // get map bounds
   fixed_t minx, miny, maxx, maxy;
   B_GetMapBounds(minx, miny, maxx, maxy);
   
   // add square bounds first
   linestack.add(MakeIndLineEq(-1, 1, 0, -M_FixedToDouble(minx)));  // x = minx
   linestack.add(MakeIndLineEq(-1, 0, 1, -M_FixedToDouble(maxy)));  // y = maxy
   linestack.add(MakeIndLineEq(-1, 1, 0, -M_FixedToDouble(maxx)));  // x = maxx
   linestack.add(MakeIndLineEq(-1, 0, 1, -M_FixedToDouble(miny)));  // y = miny

   // Do the work
   recursiveGetLines(numnodes - 1);
}

//
// TempBotMapPImpl::BSPLineGen::putLinesInColl
//
// Puts the lines, sorted, in the collection
//
void TempBotMapPImpl::BSPLineGen::putLinesInColl(PODCollection<RawLine> &coll)
{
   RawLine *newLine;
   v2fixed_t *oldv = NULL;
   for (PODCollection<v2fixed_t> *it = splitcoll.begin(); it != splitcoll.end();
        ++it)
   {
      // first, sort them
      std::sort(it->begin(), it->end(), LinePointCompare());
      
      v2fixed_t *jt = it->begin();
      oldv = jt;
      for (++jt; jt != it->end(); oldv = jt++)
      {
         v2fixed_t v[2];
         v[0] = *oldv;
         v[1] = *jt;
         if (D_abs(v[0].x - v[1].x) < FRACUNIT &&
             D_abs(v[0].y - v[1].y) < FRACUNIT)
         {
            continue;   // don't accept negligible lengths
         }
         const sector_t *sector[2];
         
         const v2fixed_t mid = {(v[0].x + v[1].x) / 2, (v[0].y + v[1].y) / 2};
         
         const angle_t ang = P_PointToAngle(v[0].x, v[0].y, v[1].x, v[1].y) -
         ANG90;
         sector[0] = R_PointInSubsector(mid.x + FixedMul(FRACUNIT >> 2,
                                                B_AngleCosine(ang)),
                                                mid.y + FixedMul(FRACUNIT >> 2,
                                                B_AngleSine(ang)))->sector;
         sector[1] = R_PointInSubsector(mid.x - FixedMul(FRACUNIT >> 2,
                                                B_AngleCosine(ang)),
                                                mid.y - FixedMul(FRACUNIT >> 2,
                                                B_AngleSine(ang)))->sector;
         if (sector[0] == sector[1])
         {
            // same sector, don't bother adding it
            continue;
         }
         newLine = &coll.addNew();
         newLine->v[0] = v[0];
         newLine->v[1] = v[1];
//         newLine->sector[0] = sector[0];
//         newLine->sector[1] = sector[1];
         newLine->line = nullptr;
//         printf("%g %g %g %g\n", M_FixedToDouble(newLine.v[0].x),
//                M_FixedToDouble(newLine.v[0].y),
//                M_FixedToDouble(newLine.v[1].x),
//                M_FixedToDouble(newLine.v[1].y));
         
      }
   }
}

//
// TempBotMapPImpl::getBSPLines
//
// Gets raw BSP lines from the map
//
void TempBotMapPImpl::getBSPLines()
{
   BSPLineGen linegen;
   
   linegen.startGetLines();
   linegen.putLinesInColl(rawBSPLines);
}

//
// TempBotMapPImpl::getLineMSectors
//
// Gets raw linedef metasectors from the map
//
void TempBotMapPImpl::getLineMSectors()
{
   const ev_action_t* action;
   for (int u = 0; u < numlines; ++u)
   {
      const line_t &line = ::lines[u];
      const fixed_t x[2] = {line.v1->x, line.v2->x},
      y[2] = {line.v1->y, line.v2->y};

      action = EV_ActionForSpecial(line.special);
      if (action && (action->type == &W1ActionType || action->type == &WRActionType))
      {
          RawLine& rl = rawBSPLines.addNew();
         angle_t fineAngle = P_PointToAngle(line.v1->x, line.v1->y, line.v2->x, line.v2->y) >> ANGLETOFINESHIFT;
         LineEq le, axle[2];
         le = LineEq::MakeFixed(*line.v1, *line.v2);
         
         // No risk of dividing by zero, given the fine arrays

         // -pi/4 ... pi/4: x in (-16, 16), y in (-tan(a), +tan(a))
         // pi/4 ... 3pi/4: x in (-tan(a-pi/2), +tan(a-pi/2)), y in (-16, 16)
         // 3pi/4 ... 5pi/4: x in (16, -16), y in (tan(a-pi), -tan(a-pi))
         // 5pi/4 ... 7pi/4: x in (tan(a-3pi/2), -tan(a-3pi/2)), y in (16, -16)

         // ax + by + c = 0

         double dradius = M_FixedToDouble(o->radius);
         if(fineAngle >= FINEANGLES - SLOPERANGE / 2 || fineAngle < SLOPERANGE / 2)
         {
            // left->right             
             axle[0] = LineEq::MakeDouble(1, 0, -(line.v1->fx - dradius));
             axle[1] = LineEq::MakeDouble(1, 0, -(line.v2->fx + dradius));
         }
         else if(fineAngle >= SLOPERANGE / 2 && fineAngle < 3 * SLOPERANGE / 2)
         {
             // bottom->up
             axle[0] = LineEq::MakeDouble(0, 1, -(line.v1->fy - dradius));
             axle[1] = LineEq::MakeDouble(0, 1, -(line.v2->fy + dradius));
         }
         else if(fineAngle >= 3 * SLOPERANGE / 2 && fineAngle < 5 * SLOPERANGE / 2)
         {
             // right->left
             axle[0] = LineEq::MakeDouble(1, 0, -(line.v1->fx + dradius));
             axle[1] = LineEq::MakeDouble(1, 0, -(line.v2->fx - dradius));
         }
         else
         {
             // top->down
             axle[0] = LineEq::MakeDouble(0, 1, -(line.v1->fy + dradius));
             axle[1] = LineEq::MakeDouble(0, 1, -(line.v2->fy - dradius));
         }
         double ix[2], iy[2];
         if (!B_IntersectionPoint(le, axle[0], ix[0], iy[0]))
             I_Error("Invalid trigger walkover line extension detected!");
         if (!B_IntersectionPoint(le, axle[1], ix[1], iy[1]))
             I_Error("Invalid trigger walkover line extension detected!");

         rl.v[0].x = M_DoubleToFixed(ix[0]);
         rl.v[0].y = M_DoubleToFixed(iy[0]);
         rl.v[1].x = M_DoubleToFixed(ix[1]);
         rl.v[1].y = M_DoubleToFixed(iy[1]);

//          rl.sector[0] = line.frontsector;
//          rl.sector[1] = line.backsector;
          rl.line = &line;
      }
            
      if (line.frontsector == line.backsector &&
          !(line.flags & (ML_3DMIDTEX | ML_BLOCKING)) &&
            line.flags & ML_TWOSIDED)
      {
         // ugly check to not put this
         continue;
      }
      
//      printf("\n%d %d - %d %d:\n", x[0] >> 16, y[0] >> 16, x[1] >> 16, y[1] >> 16);

      RawMSector &rlms = rawMSectors.addNew();
      rlms.lineGen = &line;
      rlms.isFromMobj = false;

      if(line.v1->x == line.v2->x || line.v1->y == line.v2->y)
      {
         const angle_t ang = P_PointToAngle(x[0], y[0], x[1], y[1]) + ANG180 +
         ANG45;
         rlms.nvertices = 4;
         for (byte i = 0; i < rlms.nvertices; ++i)
         {
            rlms.v[i].x = x[i >> 1] +
            B_Sign(B_AngleCosine(ang - ANG90 * i)) * o->radius;
            
            rlms.v[i].y = y[i >> 1] +
            B_Sign(B_AngleSine(ang - ANG90 * i)) * o->radius;
            
//            printf("[%d %d]", rlms.v[i].x >> 16, rlms.v[i].y >> 16);
         }
      }
      else
      {
         const angle_t ang = P_PointToAngle(x[0], y[0], x[1], y[1]) / ANG90 *
         ANG90 - ANG45;
         static const byte tmp[] = {0, 1, 2, 2, 3, 0};
         rlms.nvertices = 6;
         for (byte i = 0; i < rlms.nvertices; ++i)
         {
            rlms.v[i].x = x[i / 3] +
            B_Sign(B_AngleCosine(ang - ANG90 * tmp[i])) * o->radius;
            
            rlms.v[i].y = y[i / 3] +
            B_Sign(B_AngleSine(ang - ANG90 * tmp[i])) * o->radius;
//            printf("<%d %d>", rlms.v[i].x >> 16, rlms.v[i].y >> 16);
         }
      }
   }
}

//
// TempBotMapPImpl::getThingMSectors
//
// Builds raw metasubsectors out of things
//
void TempBotMapPImpl::getThingMSectors()
{
   for(Thinker *th = thinkercap.next; th != &thinkercap; th = th->next)
   {
      Mobj *mo;
      
      if(!(mo = thinker_cast<Mobj *>(th)))
         continue;
      
      if(B_IsMobjSolidDecor(*mo))
      {
         RawMSector &rtms = rawMSectors.addNew();
         rtms.nvertices = 4;
         rtms.isFromMobj = true;
         rtms.mobjGen = mo;
         fixed_t boxradius = mo->radius + o->radius;
         rtms.v[0].x = mo->x - boxradius;
         rtms.v[0].y = mo->y - boxradius;
         rtms.v[1].x = mo->x - boxradius;
         rtms.v[1].y = mo->y + boxradius;
         rtms.v[2].x = mo->x + boxradius;
         rtms.v[2].y = mo->y + boxradius;
         rtms.v[3].x = mo->x + boxradius;
         rtms.v[3].y = mo->y - boxradius;
      }
   }
}

//
// TempBotMapPImpl::placeBSPLines
//
// Places lines for the raw BSP sources
//
void TempBotMapPImpl::placeBSPLines()
{
   for (int i = 0; i < (int)rawBSPLines.getLength(); ++i)
   {
      const RawLine &rl = rawBSPLines[i];
      v2fixed_t v1 = o->placeVertex(rl.v[0]);
      v2fixed_t v2 = o->placeVertex(rl.v[1]);
      o->placeLine(v1, v2, rl.line);
   }
}

//
// BotManPImpl::placeMSecLines
//
// Places lines for the raw metasector sources
//
void TempBotMapPImpl::placeMSecLines()
{
   int numms = (int)rawMSectors.getLength();

   IntOSet simpleSet;
   v2fixed_t v = {D_MININT}, oldv = {D_MININT}, firstv = {D_MININT};
   for(int i = 0; i < numms; ++i)
   {
      v.x = oldv.x = firstv.x = D_MININT;
      simpleSet.clear();
      simpleSet.insert(i);
      RawMSector &rms = rawMSectors[i];
      for (int j = 0; j < rms.nvertices; ++j)
      {
         oldv = v;
         v = o->placeVertex(rms.v[j]);
         if(firstv.x == D_MININT)
            firstv = v;
         if(oldv.x != D_MININT)
            o->placeLine(oldv, v, nullptr, &simpleSet);
      }
      o->placeLine(v, firstv, nullptr, &simpleSet);
   }
}

//
// TempBotMapPImpl::fillMSecRefs
//
// Fills the meta-sector references and clears the inner BSP lines
//
void TempBotMapPImpl::fillMSecRefs()
{
   TempBotMap::LinePtrSet visitedSet;
   IntOSet blockSet;
   PODCollection<TempBotMap::Line *> deletedColl;

   for (int i = 0; i < (int)rawMSectors.getLength(); ++i)
   {
      visitedSet.clear();
      blockSet.clear();

      // Gather blockmaps of its linedefs
      // FIXME: fill gaps on metasectors large enough
      RawMSector &rms = rawMSectors[i];
      for (auto jt = rms.linerefs.begin(); jt != rms.linerefs.end(); ++jt)
      {
         TempBotMap::Line &ln = *jt->lineref;
         blockSet.insert(ln.blockIndices.begin(), ln.blockIndices.end());
      }
      // Now look through the map blocks for foreign lines
      for (auto jt = blockSet.begin(); jt != blockSet.end(); ++jt)
      {
         deletedColl.makeEmpty();
         // Look through the lines in these mapblocks
         for (auto kt = o->lineBMap[*jt].begin();
              kt != o->lineBMap[*jt].end();
              ++kt)
         {
            // Alias the line to an easy name
            TempBotMap::Line &ln = **kt;
            if(visitedSet.count(&ln))  // was visited, so skip
               continue;
            visitedSet.insert(&ln);
            fixed_t x = ln.v1.x / 2 + ln.v2.x / 2;
            fixed_t y = ln.v1.y / 2 + ln.v2.y / 2;
            // This metasector is not part of it
            if(!ln.msecIndices[0].count(i) && !ln.msecIndices[1].count(i))
            {
               // See if it's inside. Look through all this rms' lines
               bool isInside = true;
               for (byte j = 0; j < rms.nvertices; ++j)
               {
                  
                  // Write coordinates and deltas into easy variables
                  fixed_t x1 = rms.v[j].x, y1 = rms.v[j].y;
                  fixed_t dx = rms.v[(j + 1) % rms.nvertices].x - x1;
                  fixed_t dy = rms.v[(j + 1) % rms.nvertices].y - y1;
                  if (B_PointOnLineSide(x, y, x1, y1, dx, dy))
                  {
                     // Middle of ln is outside. Consider the line outside
                     // FIXME: careful with slightly concave metasectors!
                     isInside = false;
                     break;   // get out of it
                  }
               }
               if(isInside)
               {
                  if (!ln.assocLine && !ln.msecIndices[0].size() && !ln.msecIndices[1].size())
                  {
                     deletedColl.add(&ln);
                  }
                  else
                  {
                     ln.msecIndices[0].insert(i);
                     ln.msecIndices[1].insert(i);
                  }
               }
               
            }
         }
         while(deletedColl.getLength() > 0)
         {
            o->deleteLine(deletedColl.pop(), NULL, NULL);
         }
      }
   }
}

//
// TempBotMap::deleteLine
//
// Deletes a line, cleaning everything up
//
void TempBotMap::deleteLine(Line *ln, IntOSet *targfront, IntOSet *targback)
{
   // erase line from all its links
   int i;
   for (i = 0; i < (int)ln->blockIndices.getLength(); ++i)
      lineBMap[ln->blockIndices[i]].erase(ln);

   TempBotMapPImpl::LinePtrFlip lpf = TempBotMapPImpl::makeLinePtrFlip(ln);
   for (byte j = 0; j < 2; ++j)
   {
      for (auto it = ln->msecIndices[j].begin();
           it != ln->msecIndices[j].end();
           ++it)
      {
         pimpl->rawMSectors[*it].linerefs.erase(lpf);
      }
   }
   
   lineList.remove(ln);
   if(targfront)
      *targfront = std::move(ln->msecIndices[0]);
   if(targback)
      *targback = std::move(ln->msecIndices[1]);
   delete ln;
}

//
// Returns true if two bot-map vertices are too close together
// Needed to prevent micro-lines
//
inline static bool B_tooClose(v2fixed_t v1, v2fixed_t v2)
{
   return D_abs(v1.x - v2.x) < FRACUNIT && D_abs(v1.y - v2.y) < FRACUNIT;
}

//
// TempBotMap::placeLine
//
// Places a line, making sure it fits with what's already there
//
TempBotMap::Line &TempBotMap::placeLine(v2fixed_t v1, v2fixed_t v2,
                                        const line_t* assocLine,
                                        const IntOSet *msecGen,
                                        const IntOSet *bsecGen)
{
   int blockIndex1 = botMap->getBlockCoords(v1);

   // What can happen?
   // -- a line already exists between v1 and v2: just return that line
   for (auto it = lineBMap[blockIndex1].begin();
        it != lineBMap[blockIndex1].end(); ++it)
   {
      Line &ln = **it;
      if(B_tooClose(ln.v1, v1) && B_tooClose(ln.v2, v2))
      {
         TempBotMapPImpl::LinePtrFlip lpf = TempBotMapPImpl::makeLinePtrFlip(&ln,
                                                                     false);
         if(msecGen)
         {
            for (auto it = msecGen->begin(); it != msecGen->end() ; ++it)
            {
               ln.msecIndices[0].insert(*it);
               pimpl->rawMSectors[*it].linerefs.insert(lpf);
            }
         }
         if(bsecGen)
         {
            lpf.flipped = true;
            for (auto it = bsecGen->begin(); it != bsecGen->end() ; ++it)
            {
               ln.msecIndices[1].insert(*it);
               pimpl->rawMSectors[*it].linerefs.insert(lpf);
            }
         }
         if (assocLine)
             ln.assocLine = assocLine;  // move it
         return ln;  // just return that
      }
      if(B_tooClose(ln.v2, v1) && B_tooClose(ln.v1, v2))
      {
         // reverse that, and return it
         TempBotMapPImpl::LinePtrFlip lpf = TempBotMapPImpl::makeLinePtrFlip(&ln, true);
         if(msecGen)
         {
            for (auto it = msecGen->begin(); it != msecGen->end() ; ++it)
            {
               ln.msecIndices[1].insert(*it);
               pimpl->rawMSectors[*it].linerefs.insert(lpf);
            }
         }
         if(bsecGen)
         {
            lpf.flipped = false;
            for (auto it = bsecGen->begin(); it != bsecGen->end() ; ++it)
            {
               ln.msecIndices[0].insert(*it);
               pimpl->rawMSectors[*it].linerefs.insert(lpf);
            }
         }
         if (assocLine)
             ln.assocLine = assocLine;  // move it
         return ln;
      }
   }
   
   // -- a vertex exist in this line's way, create two instead
   PODCollection<int> coll;
   botMap->getTouchedBlocks(v1.x, v1.y, v2.x, v2.y, [&coll](int b){
      coll.add(b);
   });

   // prepared these for bounds checking a bit later
   fixed_t maxx = botMap->bMapOrgX + botMap->bMapWidth * BOTMAPBLOCKSIZE;
   fixed_t maxy = botMap->bMapOrgY + botMap->bMapHeight * BOTMAPBLOCKSIZE;
   for (auto it = coll.begin(); it != coll.end(); ++it)
   {
      // scan each map block
      int b = *it;
      for (auto it = lineBMap[b].begin(); it != lineBMap[b].end(); ++it)
      {
         Line &ln = **it;
         // see if it isn't just one of the extremes
         v2fixed_t vs[2] = {ln.v1, ln.v2};

         for(int vi = 0; vi < 2; ++vi)
         {
            v2fixed_t v = vs[vi];
            if(B_tooClose(v, v1) || B_tooClose(v, v2))
               goto nextIt;

            v2fixed_t proj = B_ProjectionOnLine(v.x, v.y, v1.x, v1.y,
                                                v2.x - v1.x, v2.y - v1.y);
            // scan each vertex in a block
            if(D_abs(proj.x - v.x) < FRACUNIT &&
               D_abs(proj.y - v.y) < FRACUNIT)
            {
               // intersecting, now see if inside
               if(FixedMul64(v.x - v1.x, v2.x - v.x) +
                  FixedMul64(v.y - v1.y, v2.y - v.y) > 0)
               {
                  // inside. Now recursively create inside until managed
                  // let's hope it doesn't crash

                  placeLine(v1, v, assocLine, msecGen, bsecGen);
                  return placeLine(v, v2, assocLine, msecGen, bsecGen);
               }
            }
         }
      nextIt:
         ;
      }
      
      // -- another line will intersect it, create a vertex there and split them
      //    both
      
      double ix, iy;
      bool isInt;
      v2fixed_t inters;
      for (auto it = lineBMap[b].begin(); it != lineBMap[b].end(); ++it)
      {
         Line &ln = **it;
         isInt = B_IntersectionPoint(LineEq::MakeFixed(v1, v2),
                                          LineEq::MakeFixed(ln.v1, ln.v2),
                                          ix, iy);
         // bounds checking
         if(isInt && fabs(ix) < 32767 && fabs(iy) < 32767)
         {
            // intersection exists

            inters.x = M_DoubleToFixed(ix);
            inters.y = M_DoubleToFixed(iy);
            // bounds checking
            if(inters.x < botMap->bMapOrgX || inters.y < botMap->bMapOrgY ||
               inters.x > maxx || inters.y > maxy)
            {
               continue;
            }
            // is it inside both these lines?
            if (FixedMul64(inters.x - v1.x, v2.x - inters.x) +
                FixedMul64(inters.y - v1.y, v2.y - inters.y) > 0 &&
                FixedMul64(inters.x - ln.v1.x, ln.v2.x - inters.x) +
                FixedMul64(inters.y - ln.v1.y, ln.v2.y - inters.y) > 0)
            {
               // it is. Now can intersect
               // Create vertex
               v2fixed_t midv = placeVertex(inters);
               // see if vertex ended up in the place of another already exis-
               // ting
               if(midv == v1)
               {
                  // intersecting me home.
                  // other line already split. So continue by adding normally
//                  goto justadd;
//                  return placeLine(v1, v2, bspIdx, msecGen, bsecGen);
                  continue;
               }
               if(midv == v2)
               {
                  // intersecting me on end.
                  // other line already split. So continue by adding normally
//                  goto justadd;
//                  return placeLine(v1, v2, bspIdx, msecGen, bsecGen);
                  continue;
               }
               placeLine(v1, midv, assocLine, msecGen, bsecGen);
               return placeLine(midv, v2, assocLine, msecGen, bsecGen);
            }
         }
      }
   }

   Line *ln = new Line;
   
//   Line *ln = estructalloc(Line, 1);
   ln->v1 = v1;
   ln->v2 = v2;
   ln->metasec[0] = NULL;
   ln->metasec[1] = NULL;
   
//   ln->blockIndices = ecalloc(int *, ln->numlinks = coll.getLength(),
//                              sizeof(int));
   ln->blockIndices.assign(std::move(coll));
   for (int i = 0; i < (int)ln->blockIndices.getLength(); ++i)
   {
      lineBMap[ln->blockIndices[i]].insert(ln);
   }
   TempBotMapPImpl::LinePtrFlip lpf = TempBotMapPImpl::makeLinePtrFlip(ln, false);
   if(msecGen)
   {
      ln->msecIndices[0] = *msecGen;
      
      for (auto it = ln->msecIndices[0].begin();
           it != ln->msecIndices[0].end();
           ++it)
      {
         pimpl->rawMSectors[*it].linerefs.insert(lpf);
      }
   }
   if(bsecGen)
   {
      ln->msecIndices[1] = *bsecGen;
      lpf.flipped = true;
      for (auto it = ln->msecIndices[1].begin();
           it != ln->msecIndices[1].end();
           ++it)
      {
         pimpl->rawMSectors[*it].linerefs.insert(lpf);
      }
   }
   ln->assocLine = assocLine;

   lpf.flipped = false;

   lineList.insert(ln);
   
   return *ln;
}

//
// TempBotMap::placeVertex
//
// Adds a vertex to given coordinates, making sure to link it in blockmap.
// If it's already in blockmap, return that one instead of creating a new one
//
v2fixed_t TempBotMap::placeVertex(v2fixed_t v)
{
   int b = botMap->getBlockCoords(v);
   
   for(auto it = lineBMap[b].begin(); it != lineBMap[b].end(); ++it)
   {
      const Line &ln = **it;
      if(B_tooClose(ln.v1, v))
         return ln.v1;
      if(B_tooClose(ln.v2, v))
         return ln.v2;
   }
   int8_t m, n;
   for (m = -1; m < 2; ++m)
   {
      for (n = -1; n < 2; ++n)
      {
         if (!m && !n)  // don't revisit centre
            continue;
         int c = botMap->getBlockCoords(v.x + m * FRACUNIT, v.y + n * FRACUNIT);
         if(c != b)
         {
            for (auto it = lineBMap[b].begin(); it != lineBMap[b].end(); ++it)
            {
               const Line &ln = **it;
               if(B_tooClose(ln.v1, v))
                  return ln.v1;
               if(B_tooClose(ln.v2, v))
                  return ln.v2;
            }
         }
      }
   }
   // not found there, create a new one
   
   // See if it sits on a line. Split it if so
   for (auto it = lineBMap[b].begin(); it != lineBMap[b].end(); ++it)
   {
      if(*it == NULL)   // sparse (deleted)
         continue;
      Line &ln = **it;
      v2fixed_t proj = B_ProjectionOnLine(v.x, v.y, ln.v1.x, ln.v1.y,
                                          ln.v2.x - ln.v1.x, ln.v2.y - ln.v1.y);
      if(B_tooClose(v, proj))
      {
         if(FixedMul64(v.x - ln.v1.x, ln.v2.x - v.x) +
            FixedMul64(v.y - ln.v1.y, ln.v2.y - v.y) > 0)
         {
            // inside the segment. Split it.
            v2fixed_t ov1 = ln.v1, ov2 = ln.v2;
            
            IntOSet front, back;
            const line_t* assocLine = ln.assocLine;
            deleteLine(&ln, &front, &back);

            placeLine(ov1, v, assocLine, &front, &back);
            placeLine(v, ov2, assocLine, &front, &back);
            return v;
         }
      }
   }

   return v;
}

//
// TempBotMap::createBlockMap
//
// Allocates the vertex and line blockmaps
//
void TempBotMap::createBlockMap()
{
   int bsz = botMap->bMapWidth * botMap->bMapHeight;
   
   for(int i = 0; i < bsz; ++i)
   {
      lineBMap.add();
   }
}

static void FindDynamicSectors(bool* dynamicSectors)
{
   // 1. Find all lines with effects
   VanillaSectorSpecial vss;
   
   // tagged sectors
   int secnum = -1;
   const sector_t* sector, *sector2;
   bool continueStair;
   
   int i, j;
   
   for(i = 0; i < ::numlines; ++i)
   {
      const line_t &line = lines[i];
      
      if(!line.special)
         continue;
      
      // Has a special
      
      if(B_LineTriggersBackSector(line))
      {
         if(!line.backsector)
            continue;
         
         // Register back sector
         dynamicSectors[line.backsector - ::sectors] = true;
         continue;
      }
      
      // Must point to a tag, now
      if(!line.args[0])
         continue;
      
      // Not a door  type
      while((secnum = P_FindSectorFromTag(line.args[0], secnum)) >= 0)
      {
         dynamicSectors[secnum] = true;
         // Also do it for secondary sectors: from stairs or donuts
         if(B_LineTriggersDonut(line))
         {
            sector = ::sectors + secnum;
            sector2 = getNextSector(sector->lines[0], sector);
            if(sector2)
               dynamicSectors[sector2 - ::sectors] = true;
         }
         else if(B_LineTriggersStairs(line))
         {
            sector = ::sectors + secnum;
            do
            {
               continueStair = false;
               for(j = 0; j < sector->linecount; ++j)
               {
                  sector2 = sector->lines[j]->frontsector;
                  if(sector2 != sector ||
                     !(sector->lines[j]->flags & ML_TWOSIDED))
                  {
                     continue;
                  }
                  sector2 = sector->lines[j]->backsector;
                  if(!sector2 || sector2->floorpic != sector->floorpic ||
                     sector2 == sector)
                  {
                     continue;
                  }
                  
                  dynamicSectors[sector2 - ::sectors] = true;
                  sector = sector2;
                  continueStair = true;
               }
            }while(continueStair);
         }
      }
   }
   
   // 2. Find all sectors with timed effects
   for(i = 0; i < ::numsectors; ++i)
   {
      sector = ::sectors + i;
      if(sector->tag == 666)  // any level can have KeenDie
      {
         dynamicSectors[i] = true;
         continue;
      }

      if(sector->tag == 667)
         for(int j = 0; j < NUM_BOSS_SPECS; ++j)
         {
            if(LevelInfo.bossSpecs & boss_specs[j].level_flag &&
               boss_specs[j].level_flag == BSPEC_MAP07_2)
            {
               dynamicSectors[i] = true;
               goto nextSector;
            }
         }

      if(!sector->special)
         continue;
      
      vss = (VanillaSectorSpecial)sector->special;
      
      if(vss == VSS_DoorCloseIn30 || vss == VSS_DoorRaiseIn5Mins)
         dynamicSectors[i] = true;
   nextSector:
      ;
   }
}


//
// TempBotMap::obtainMetaSectors
//
// This obtains meta sectors from
//
void TempBotMap::obtainMetaSectors()
{
   // remember to free this stuff
   bool* dynamicSectors = ecalloc(bool*, ::numsectors, sizeof(bool));
   
   FindDynamicSectors(dynamicSectors);
   
   
   //
   // MSecSetHash, MSecSetPred, mSecMap
   //
   // Map from a set of raw msector indices to a live MetaSector reference
   // Used to create a new (compound) MetaSector for every distinct combination
   // of indices
   //
   struct MSecSetHash
   {
      size_t operator()(const IntOSet *st) const
      {
         size_t h = 0;
         
		 // NOTE: this is poor, but hopefully should be valid
         for(auto it = st->cbegin(); it != st->cend(); ++it)
            h += (size_t)*it;
         
         return h;
      };
   };
   struct MSecSetPred
   {
      bool operator()(const IntOSet *st1, const IntOSet *st2) const
      {
         return *st1 == *st2;
      }
   };
   std::unordered_map<IntOSet *, MetaSector *, MSecSetHash, MSecSetPred>
   mSecMap;

   //
   // SecPtrHash, SecPtrPred
   //
   // For when using various pointers to sets
   //
   struct SecPtrHash
   {
	   size_t operator()(const std::set<MetaSector*> &st) const
	   {
		   uintptr_t h = 0;

		   for (auto it = st.cbegin(); it != st.cend(); ++it)
			   h = 5 * h + (uintptr_t)*it;

		   return std::hash<uintptr_t>()(h);
	   }
   };

   //
   // SecRefTuple, SecRefHash, SecRefPred, secRefs
   //
   // Contains sector reference and line-blocking information.
   // Used by line metasectors to combine together identical ones
   //
   struct SecRefTuple
   {
      const sector_t *sec[2];
      byte blocks;
      static SecRefTuple Make(const sector_t *s1, const sector_t *s2, byte blocks)
      {
         SecRefTuple ret;
         ret.sec[0] = s1 < s2 ? s1 : s2;
         ret.sec[1] = s1 < s2 ? s2 : s1;
         ret.blocks = blocks;
         return ret;
      }
   };
   struct SecRefHash
   {
      size_t operator()(const SecRefTuple &o) const
      {
         return std::hash<uintptr_t>()(5 * (5 * uintptr_t(o.sec[0]) + uintptr_t(o.sec[1])) + o.blocks);
      }
   };
   struct SecRefPred
   {
      bool operator()(const SecRefTuple &o1, const SecRefTuple &o2) const
      {
         return o1.blocks == o2.blocks &&
         o1.sec[0] == o2.sec[0] && o1.sec[1] == o2.sec[1];
      }
   };
   std::unordered_map<SecRefTuple, MetaSector *, SecRefHash, SecRefPred>
   secRefs;
   
   int msec_index = 0;

   // Create wall metasector
   LineMSector *wallms = new LineMSector;
   

   bool wallmsset = false;
   // (set its properties when first line is encountered)
   
   // coll, scoll: collection of either sector or line metasector references

   // Guidelines on these collections:
   // - coll maps raw metasector index to a finished metasector pointer
   // - scoll maps sector index to finished simple metasector pointer
   // Two indices can map to the same pointer, thus allowing lines to reference
   // the same finished metasector when they referenced different raw 
   // metasectors
   PODCollection<MetaSector *> coll, scoll;
   
   std::unordered_map<uint64_t, SimpleMSector*> simpleRepeatSet;
#define FLOORCEILING_HEIGHT(f, c) ((uint64_t)(f) + ((uint64_t)(c) << 32))
   
   // Get all sector metasectors
   scoll.reserve(numsectors);
   for (int i = 0; i < numsectors; ++i)
   {
      uint64_t comboHeight = FLOORCEILING_HEIGHT(::sectors[i].floorheight,
                                                 ::sectors[i].ceilingheight);
      bool isStatic = !dynamicSectors[i]
      && B_SectorTypeIsHarmless(::sectors[i].special);
      
      if(isStatic && simpleRepeatSet.count(comboHeight))
      {
         scoll.add(simpleRepeatSet[comboHeight]);
         continue;
      }
      
      SimpleMSector *sms = new SimpleMSector;
      sms->sector = ::sectors + i;
      sms->listLink.dllData = msec_index++;
      msecList.insert(sms);
      
      if(isStatic)
      {
         simpleRepeatSet[comboHeight] = sms;
      }
      scoll.add(sms);
   }
   
#undef FLOORCEILING_HEIGHT
   
   // Get all thing or line metasectors
   
   // WARNING: each iteration must add an item to 'coll'.
   coll.reserve(pimpl->rawMSectors.getLength());
   for (auto it = pimpl->rawMSectors.begin(); it != pimpl->rawMSectors.end(); ++it)
   {
      const TempBotMapPImpl::RawMSector &rms = *it;
      if (rms.isFromMobj)
      {
         ThingMSector *tms = new ThingMSector;
         tms->sector = R_PointInSubsector(rms.mobjGen->x,
                                          rms.mobjGen->y)->sector;
         tms->mobj = rms.mobjGen;
         tms->listLink.dllData = msec_index++;
         msecList.insert(tms);
		 
         coll.add(tms);
      }
      else
      {
         if (!rms.lineGen->backsector)
         {
            // single-sided lines: always walls, not variant
            if(!wallmsset)
            {
               wallmsset = true;
               wallms->line = rms.lineGen;
               wallms->sector[0] = rms.lineGen->frontsector;
               wallms->sector[1] = nullptr;
			      wallms->listLink.dllData = msec_index++;
			      msecList.insert(wallms);

               botMap->nullMSec = wallms;
            }
            coll.add(wallms);
         }
         else
         {
            // two sided line
            SecRefTuple srt = SecRefTuple::Make(rms.lineGen->frontsector,
                                                rms.lineGen->backsector,
                                          !!(rms.lineGen->flags & ML_BLOCKING));
            
            // Avoid creating a new metasector if one with same references exists
            // Currently solid line metasectors are considered the same
            if (!secRefs.count(srt))
            {
               const sector_t* front = rms.lineGen->frontsector;
               const sector_t* back = rms.lineGen->backsector;
               if(!dynamicSectors[front - ::sectors]
                  && !dynamicSectors[back - ::sectors]
                  && !(rms.lineGen->flags & ML_BLOCKING))
               {
                  fixed_t deltaFloor, deltaCeiling;
                  deltaFloor = front->floorheight - back->floorheight;
                  deltaCeiling = front->ceilingheight - back->ceilingheight;

                  // B inside A: DC <= 0, DF >= 0
                  // A inside B: DC >= 0, DF <= 0
                  
                  MetaSector* ms = nullptr;
                  if(deltaCeiling <= 0 && deltaFloor >= 0)
                  {
                     // front inside back. Front wins
                     // Just use the simple metasector instead of a new line
                     // sector
                     ms = scoll[front - ::sectors];
                  }
                  else if(deltaCeiling >= 0 && deltaFloor <= 0)
                  {
                     ms = scoll[back - ::sectors];
                  }
                  
                  if(ms)
                  {
                     coll.add(ms);
                     secRefs[srt] = ms;
                     continue;
                  }
               }
               
               LineMSector *lms = new LineMSector;
               lms->sector[0] = front;
               lms->sector[1] = back;
               lms->line = rms.lineGen;
               lms->listLink.dllData = msec_index++;
               msecList.insert(lms);

               coll.add(lms);
               
               secRefs[srt] = lms;
            }
            else
               coll.add(secRefs[srt]);
         }
      }
   }
   
   DLListItemNC<Line> *item; // iteration item
   byte i;                 // various iteration indices
   int j;
   
   std::set<MetaSector *> cmsSet;   // set of metasectors to add to compound
   //std::unordered_map<std::set<MetaSector *> *, CompoundMSector *, SecPtrHash, SecPtrPred> cmsSetMap;
   std::unordered_map<std::set<MetaSector *>, MetaSector *, SecPtrHash> cmsSetMap;
   
   // Now visit each line and setup its metasector reference

   for (item = lineList.head; item; item = item->dllNext)
   {
      Line &ln = *item->dllObject;
      for (i = 0; i < 2; ++i)
      {
         if (!ln.msecIndices[i].size())   // No raw msec on this side of line
         {
            // just sector
            const v2fixed_t mid = {ln.v1.x / 2 + ln.v2.x / 2,
               ln.v1.y / 2 + ln.v2.y / 2};
            
            const angle_t ang = P_PointToAngle(ln.v1.x, ln.v1.y,
                                               ln.v2.x, ln.v2.y) +
            (i ? ANG90 : -ANG90);
            
            const sector_t *sector;
            sector = R_PointInSubsector(mid.x + FixedMul(FRACUNIT >> 2,
                                                            B_AngleCosine(ang)),
                                        mid.y + FixedMul(FRACUNIT >> 2,
                                                   B_AngleSine(ang)))->sector;
            ln.metasec[i] = scoll[sector - sectors];
         }
         else if(ln.msecIndices[i].size() == 1) // non-overlapped raw metasec
         {
            // single/direct one
            ln.metasec[i] = coll[*ln.msecIndices[i].begin()];
         }
         else
         {
            if (mSecMap.count(&ln.msecIndices[i])) // index set already mapped
            {
               // has value there
               MetaSector* ms = mSecMap.at(&ln.msecIndices[i]);
               ln.metasec[i] = ms;
            }
            else
            {
               cmsSet.clear();                     // reset reference set
               for (auto it = ln.msecIndices[i].begin();
                    it != ln.msecIndices[i].end();
                    ++it)
               {
                  if (coll[*it] == wallms)
                  {
                     // no back sector, so it's an outside wall, so just con-
                     // sider that
                     ln.metasec[i] = coll[*it];
                     mSecMap[&ln.msecIndices[i]] = ln.metasec[i];
                     goto nextLineSide;
                  }
                  cmsSet.insert(coll[*it]);        // add to set
               }
               if (cmsSet.size() == 1)             // only one distinct element
               {
                  // just use a simple line metasector
                  ln.metasec[i] = coll[*ln.msecIndices[i].begin()];
                  mSecMap[&ln.msecIndices[i]] = ln.metasec[i];
               }
               else
               {
                  if (cmsSetMap.count(cmsSet))
                  {
                     MetaSector *cms = cmsSetMap.at(cmsSet);
                     ln.metasec[i] = cms;
                     mSecMap[&ln.msecIndices[i]] = cms;
                  }
                  else
                  {
                     // First, check if all are simple metasectors and are static
                     bool allStatic = true;
                     fixed_t maxFloor = D_MININT, minCeiling = D_MAXINT;
                     SimpleMSector* floorSms = nullptr, *ceilingSms = nullptr;
                     
                     for(auto it = cmsSet.begin(); it != cmsSet.end(); ++it)
                     {
                        if(!(*it)->isInstanceOf(RTTI(SimpleMSector)))
                        {
                           allStatic = false;
                           break;
                        }
                        SimpleMSector* sms = runtime_cast<SimpleMSector*>(*it);
                        
                        if(dynamicSectors[sms->sector - ::sectors])
                        {
                           allStatic = false;
                           break;
                        }
                        
                        if(sms->sector->floorheight > maxFloor)
                        {
                           maxFloor = sms->sector->floorheight;
                           floorSms = sms;
                        }
                        if(sms->sector->ceilingheight < minCeiling)
                        {
                           minCeiling = sms->sector->ceilingheight;
                           ceilingSms = sms;
                        }
                     }
                     
                     if(allStatic && floorSms && floorSms == ceilingSms)
                     {
                        cmsSetMap[cmsSet] = floorSms;
                        
                        ln.metasec[i] = floorSms;
                        mSecMap[&ln.msecIndices[i]] = floorSms;
                     }
                     else
                     {
                        // create new metasector
                        CompoundMSector *cms = new CompoundMSector;
                        cms->msectors = emalloc(const MetaSector **,
                           (cms->numElem = static_cast<int>(cmsSet.size()))
                           * sizeof(const MetaSector *));

                        cmsSetMap[cmsSet] = cms;

                        j = 0;
                        for (auto it = cmsSet.begin(); it != cmsSet.end(); ++it, ++j)
                        {
                           cms->msectors[j] = *it;
                        }

                        cms->listLink.dllData = msec_index++;
                        msecList.insert(cms);

                        ln.metasec[i] = cms;
                        mSecMap[&ln.msecIndices[i]] = cms;
                     }
                  }
               }  // cmsSet.size()
            }  // mSecMap.count()
         }  // msecIndices[i].size()
      nextLineSide:
         ;
      }
      // Now clear memory of *SOME* intermediary data
      //ln.blockIndices.clear();
   }

   efree(dynamicSectors);
}


//
// TempBotMap::clearRedundantLines
//
// Clears lines with the same metasector reference on either side
//
void TempBotMap::clearRedundantLines()
{
   DLListItemNC<Line> *item, *next;
   for (item = lineList.head; item; item = next)
   {
      next = item->dllNext;
      Line &ln = *item->dllObject;
      if(!ln.assocLine && ln.metasec[0] == ln.metasec[1])
         deleteLine(&ln, NULL, NULL);
   }
}

//
// TempBotMap::clearUnusedVertices
//
// Removes vertices no longer used (degree 0)
//
void TempBotMap::clearUnusedVertices()
{
   for(DLListItemNC<Line> *item = lineList.head; item; item = item->dllNext)
   {
      const Line &ln = *item->dllObject;
      auto it = vertexMap.find(ln.v1);
      if(it == vertexMap.cend())
         vertexMap[ln.v1] = static_cast<int>(vertexMap.size());
      it = vertexMap.find(ln.v2);
      if(it == vertexMap.cend())
         vertexMap[ln.v2] = static_cast<int>(vertexMap.size());
   }
   vertexList.resize(vertexMap.size());
   for(const auto &pair : vertexMap)
      vertexList[pair.second] = pair.first;
}

//
// TempBotMap::TempBotMap
//
// Constructor
//
TempBotMap::TempBotMap() : generated(false), radius(0)
{
   lineList.head = nullptr;
   msecList.head = nullptr;

   pimpl = new TempBotMapPImpl(this);
   
   static LinePtrSet lineBMapProto;
   lineBMap.setPrototype(&lineBMapProto);
}

//
// TempBotMap::~TempBotMap
//
// Destructor
//
TempBotMap::~TempBotMap()
{
   {
      DLListItemNC<Line> *item, *next;
      for (item = lineList.head; item != nullptr; item = next)
      {
         next = item->dllNext;
         delete item->dllObject;
      }
   }
   {
      DLListItem<MetaSector> *item, *next;
      for (item = msecList.head; item != nullptr; item = next)
      {
         next = item->dllNext;
         delete item->dllObject;
      }
   }
   
   delete pimpl;
}

//
// TempBotMap::generateForRadius
//
// Generates the bot map, based on a given radius (commonly player's)
//
void TempBotMap::generateForRadius(fixed_t inradius)
{
//   clock_t CLK_STARTED = clock();
   if(generated)
      return;
   generated = true;
   radius = inradius;//-0x4000;// 0.25 = 0000 0000 0000 0000 0100 0000 0000 0000
   
   B_BEGIN_CLOCK
   pimpl->getBSPLines();
   B_MEASURE_CLOCK(getBSPLines)
   
   B_NEW_CLOCK
   pimpl->getLineMSectors();
   B_MEASURE_CLOCK(getLineMSectors)
   
   B_NEW_CLOCK
   pimpl->getThingMSectors();
   B_MEASURE_CLOCK(getThingMSectors)

   IntOSet::s_maxSize = static_cast<int>(pimpl->rawMSectors.getLength());

   B_NEW_CLOCK
   createBlockMap();	// the tempbotmap part, derived from BotMap
   B_MEASURE_CLOCK(createBlockMap)
   
   B_NEW_CLOCK
   pimpl->placeBSPLines();
   B_MEASURE_CLOCK(placeBSPLines)
   
   {
      int cntl = 0, cntv = 0;
      for(const auto *line = lineList.head; line; line = line->dllNext)
      {
         ++cntl;
      }
      B_Log("%d lines, %d vertices", cntl, cntv);
   }

   B_NEW_CLOCK
   pimpl->placeMSecLines();
   B_MEASURE_CLOCK(placeMSecLines)
   
   IntOSet::s_maxSize = botMap->bMapWidth * botMap->bMapHeight;

   B_NEW_CLOCK
   pimpl->fillMSecRefs();
   B_MEASURE_CLOCK(fillMSecRefs)

   B_NEW_CLOCK
   obtainMetaSectors();
   B_MEASURE_CLOCK(obtainMetaSectors)
   
   B_NEW_CLOCK
   clearRedundantLines();
   B_MEASURE_CLOCK(clearRedundantLines)
   
   B_NEW_CLOCK
   clearUnusedVertices();
   B_MEASURE_CLOCK(clearUnusedVertices)
   
//   checkVertices();
//   checkLines();
   
//   reduceVertices();
//   clock_t CLK_ENDED = clock();
//   printf("%lu\n", CLK_ENDED - CLK_STARTED);
}

// EOF

